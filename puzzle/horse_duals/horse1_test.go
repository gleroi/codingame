package main

import (
	"strings"
	"testing"
)

var examples = []struct {
	expected int
	length   int
	input    string
}{
	{
		expected: 1,
		length:   4,
		input:    "5\n8\n9\n1",
	},
	{
		expected: 1,
		length:   4,
		input:    "5\n8\n9\n0",
	},
	{
		expected: 1,
		length:   11,
		input:    "5\n15\n17\n3\n8\n11\n28\n6\n55\n7\n27",
	},
	{
		expected: 47,
		length:   454,
		input: "9999999\n9999888\n9999741\n9999653\n9999595\n9999444\n9999387\n9999241\n9999140\n9999042\n9998937\n9998837\n9998724\n9998609\n9998475\n9998391\n9998321\n9998187\n9998070\n" +
			"9997991\n9997902\n9997822\n9997767\n9997712\n9997651\n9997540\n9997406\n9997308\n9997210\n9997133\n9997041\n9996946\n9996841\n9996705\n9996655\n9996515\n9996379\n9996277\n9996141\n" +
			"9996013\n9995910\n9995783\n9995638\n9995528\n9995474\n9995362\n9995304\n9995236\n9995171\n9995123\n9994973\n9994860\n9994798\n9994682\n9994571\n9994473\n9994337\n9994231\n9994159\n" +
			"9994057\n9993936\n9993889\n9993744\n9993609\n9993469\n9993353\n9993268\n9993219\n9993162\n9993016\n9992897\n9992803\n9992721\n9992630\n9992513\n9992414\n9992326\n9992279\n9992139\n" +
			"9991988\n9991872\n9991770\n9991671\n9991560\n9991477\n9991383\n9991324\n9991220\n9991071\n9991011\n9990928\n9990786\n9990668\n9990558\n9990487\n9990364\n9990225\n9990156\n9990082\n" +
			"9989943\n9989835\n9989758\n9989662\n9989611\n9989505\n9989456\n9989329\n9989200\n9989115\n9989003\n9988858\n9988764\n9988635\n99885448\n4147992\n4147865\n4147800\n4147747\n4147626\n" +
			"4147535\n4147452\n4147331\n4147217\n4147115\n4147019\n4146935\n4146828\n4146694\n4146578\n4146464\n4146362\n4146269\n4146123\n4146022\n4145942\n4145815\n4145733\n4145622\n4145485\n" +
			"4145400\n4145263\n4145213\n4145063\n4144927\n4144875\n4144802\n4144724\n4144647\n4144516\n4144428\n4144344\n4144246\n4144148\n4144091\n4144034\n4143968\n4143842\n4143776\n4143705\n" +
			"4143648\n4143508\n4143416\n4143270\n4143168\n4143050\n4142989\n4142863\n4142804\n4142708\n4142565\n4142461\n4142400\n4142267\n4142150\n4142090\n4141988\n4141916\n4141782\n4141638\n" +
			"4141577\n4141515\n4141466\n4141322\n4141200\n4141095\n4141043\n4140987\n4140866\n4140804\n4140755\n4140615\n4140540\n4140445\n4140345\n4140283\n4140133\n4140034\n4139883\n4139761\n" +
			"4139623\n4139474\n4139345\n4139232\n4139184\n4139059\n4138985\n4138837\n4138687\n4138537\n4138433\n4138383\n4138254\n4138125\n4138011\n4137883\n4137807\n4137713\n4137582\n4137487\n" +
			"4137380\n4137333\n4137199\n4137054\n4136927\n4136873\n4136808\n4136706\n4136610\n4136542\n4136395\n4136340\n4136225\n4136151\n4136080\n4135942\n4135857\n4135770\n4135674\n4135572\n" +
			"4135433\n4135323\n4135212\n4135129\n4135007\n4134888\n4134806\n4134683\n4134554\n4134478\n4134407\n4134293\n4134176\n4134038\n4133923\n4133805\n4133733\n4133643\n4133508\n4133377\n" +
			"4133255\n4133128\n4133015\n4132939\n4132834\n4132785\n4132714\n4132597\n4132547\n4132447\n4132392\n4132289\n4132167\n4132111\n4132029\n4131956\n4131830\n4131691\n4131602\n4131511\n" +
			"4131397\n4131303\n4131169\n4131047\n4130934\n4130862\n4130743\n4130634\n4130531\n4130474\n4130340\n4130256\n4130193\n4130082\n4130026\n4129879\n4129823\n4129771\n4129672\n4129537\n" +
			"4129425\n4129280\n4129180\n4129068\n4128941\n4128833\n4128713\n4128661\n4128564\n4128460\n4128350\n4128279\n4128146\n4128019\n4127894\n4127845\n4127709\n4127641\n4127494\n4127402\n" +
			"4127346\n4127290\n4127191\n4127077\n4126967\n4126897\n4126779\n4126643\n4126512\n4126421\n4126281\n4126159\n4126052\n4126002\n4125907\n4125832\n4125714\n4125572\n4125431\n4125339\n" +
			"4125260\n4125164\n4125039\n4124916\n4124860\n4124805\n4124751\n4124658\n4124529\n4124482\n4124341\n4124212\n4124115\n4124030\n4123980\n4123879\n4123768\n4123640\n4123585\n4123529\n" +
			"4123389\n4123324\n4123243\n4123105\n4123027\n4122928\n4122837\n4122724\n4122648\n4122528\n4122455\n4122312\n4122167\n4122107\n4121963\n4121876\n4121824\n4121762\n4121711\n4121598\n" +
			"4121483\n4121396\n4121303\n4121237\n4121087\n4121028\n4120939\n4120836\n4120730\n4120681\n4120583\n4120491\n4120439\n4120293\n4120165\n4120110\n4120033\n4119982\n4119841\n4119786\n" +
			"4119654\n4119517\n4119413\n4119280\n4119208\n4119078\n4118959\n4118808\n4118666\n4118530\n4118411\n4118342\n4118252\n4118123\n4118063\n4117978\n4117852\n4117735\n4117637\n4117505\n" +
			"4117361\n4117215\n4117159\n4117009\n4116884\n4116755\n4116618\n4116491\n4116396\n4116348\n4116281\n4116187\n4116056\n4115906\n4115765\n4115710\n4115590\n4115495\n4115441\n4115332\n" +
			"4115252\n4115131\n4115031\n4114880\n4114809\n4114685\n4114634\n4114567\n4114518\n4114412\n4114305\n4114228\n4114174\n4114110\n4114035\n4113904\n",
	},
}

func TestExamplesCompute1(t *testing.T) {
	for testID, test := range examples {
		d := compute(strings.NewReader(test.input), test.length)
		if d != test.expected {
			t.Errorf("case %d: expected %d got %d", testID+1, test.expected, d)
		}
	}
}

func TestExamplesCompute2(t *testing.T) {
	for testID, test := range examples {
		d := compute2(strings.NewReader(test.input), test.length)
		if d != test.expected {
			t.Errorf("case %d: expected %d got %d", testID+1, test.expected, d)
		}
	}
}
